<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:security="http://www.springframework.org/schema/security"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/security
       http://www.springframework.org/schema/security/spring-security.xsd
       http://www.springframework.org/schema/jdbc
       http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd">

	<security:http auto-config="true" use-expressions="true">
		<security:intercept-url pattern="/login.htm" access="permitAll" />
		<security:intercept-url pattern="/account/*.htm" access="hasRole('ROLE_USER') and fullyAuthenticated" />
		<security:intercept-url pattern="/*" access="hasRole('ROLE_USER')" />
		<security:form-login login-page="/login.htm" />
		<security:remember-me key="TRYITOUT_SPRING_SECURITY_KEY" token-validity-seconds="3600" data-source-ref="dataSource" />
		<security:logout logout-url="/j_spring_security_logout" invalidate-session="true" logout-success-url="/login.htm" />
		
		<!-- custom filter to authenticate with username, password and signature 
		-->
		<security:custom-filter ref="requestHeaderFilter" before="FORM_LOGIN_FILTER"/>
		
		<!-- our filter relies on the SecurityContext and Authentication
			objects being available and populated, in order to verify the user's GrantedAuthority 
		-->
		<security:custom-filter ref="ipFilter" before="FILTER_SECURITY_INTERCEPTOR"/>
		
		<security:session-management>
			<security:concurrency-control max-sessions="1" expired-url="/login.htm?error=expired"/>
		</security:session-management>
		
	</security:http>

	<security:authentication-manager alias="authenticationManager" >
	<security:authentication-provider ref="customAuthenticationProvider"/>
		<security:authentication-provider user-service-ref="jdbcUserService">
			<security:password-encoder ref="passwordEncoder">
				<security:salt-source ref="saltSource" />
			</security:password-encoder>
		</security:authentication-provider>
	</security:authentication-manager>

	<bean id="jdbcUserService" class="com.example.security.CustomJdbcDaoImpl">
		<property name="dataSource" ref="dataSource" />
		<property name="enableGroups" value="true" />
		<property name="enableAuthorities" value="false" />
		<property name="usersByUsernameQuery">
			<value>
				select username,password,enabled,salt from users where username = ?
			</value>
		</property>
		<property name="groupAuthoritiesByUsernameQuery">
			<value>
				select g.id, g.group_name, ga.authority
				from groups g,
				group_members gm, group_authorities ga
				where gm.username = ?
				and g.id = ga.group_id
				and g.id = gm.group_id
			</value>
		</property>
		<property name="authoritiesByUsernameQuery">
			<value>
				select username,authority from authorities where username = ?
			</value>
		</property>
	</bean>

	<bean id="passwordEncoder" class="org.springframework.security.authentication.encoding.ShaPasswordEncoder" />
	
	<bean class="com.example.security.DatabasePasswordSecurerBean" init-method="secureDatabase" depends-on="dataSource">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<bean id="saltSource" class="org.springframework.security.authentication.dao.ReflectionSaltSource">
		<property name="userPropertyToUse" value="salt" />
	</bean>

	<jdbc:embedded-database id="dataSource" type="HSQL">
		<jdbc:script location="classpath:security-schema.sql" />
		<jdbc:script location="classpath:remember-me-schema.sql" />
		<jdbc:script location="classpath:test-data.sql" />
	</jdbc:embedded-database>
	
	<bean  id="databaseQueryBean" class="com.example.security.DatabaseQueryBean" depends-on="dataSource">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<bean id="ipFilter" class="com.example.security.filter.IPRoleAuthenticationFilter">
		<property name="targetRole" value="ROLE_ADMIN" />
		<property name="allowedIPAddresses">
			<list>
				<value>1.2.3.4</value>
			</list>
		</property>
	</bean>

	<bean id="requestHeaderFilter" class="com.example.security.filter.RequestHeaderProcessingFilter">
		<property name="authenticationManager" ref="authenticationManager"/>
	</bean>

	<bean id="customAuthenticationProvider" class="com.example.security.CustomAuthenticationProvider">
		<property name="passwordEncoder" ref="passwordEncoder" />
		<property name="saltSource" ref="saltSource" />
		<property name="userDetailsService" ref="jdbcUserService" />
	</bean>
</beans>