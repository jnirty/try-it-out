<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:security="http://www.springframework.org/schema/security"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/security
       http://www.springframework.org/schema/security/spring-security.xsd
       http://www.springframework.org/schema/jdbc
       http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd
       http://www.springframework.org/schema/util	
       http://www.springframework.org/schema/util/spring-util-3.0.xsd">

	<security:global-method-security secured-annotations="enabled" access-decision-manager-ref="aclDecissionManager"/>
	
	<security:http auto-config="true" use-expressions="true">
		<security:intercept-url pattern="/login.htm" access="permitAll" />
		<security:intercept-url pattern="/home.htm" access="permitAll" />
		<security:intercept-url pattern="/account/*.htm" access="hasRole('ROLE_USER') and fullyAuthenticated" />
		<security:intercept-url pattern="/*" access="hasRole('ROLE_USER')" />
		<security:form-login login-page="/login.htm" />
		<security:remember-me key="TRYITOUT_SPRING_SECURITY_KEY" token-validity-seconds="3600" data-source-ref="dataSource" />
		<security:logout logout-url="/j_spring_security_logout" invalidate-session="true" logout-success-url="/login.htm" />
	</security:http>

	<security:authentication-manager alias="authenticationManager" >
		<security:authentication-provider user-service-ref="jdbcUserService">
			<security:password-encoder ref="passwordEncoder">
				<security:salt-source ref="saltSource" />
			</security:password-encoder>
		</security:authentication-provider>
	</security:authentication-manager>

	<bean id="jdbcUserService" class="com.example.security.CustomJdbcDaoImpl">
		<property name="dataSource" ref="dataSource" />
		<property name="enableGroups" value="true" />
		<property name="enableAuthorities" value="false" />
		<property name="usersByUsernameQuery">
			<value>
				select username,password,enabled,salt from users where username = ?
			</value>
		</property>
		<property name="groupAuthoritiesByUsernameQuery">
			<value>
				select g.id, g.group_name, ga.authority
				from groups g,
				group_members gm, group_authorities ga
				where gm.username = ?
				and g.id = ga.group_id
				and g.id = gm.group_id
			</value>
		</property>
		<property name="authoritiesByUsernameQuery">
			<value>
				select username,authority from authorities where username = ?
			</value>
		</property>
	</bean>

	<bean id="passwordEncoder" class="org.springframework.security.authentication.encoding.ShaPasswordEncoder" />
	
	<bean class="com.example.security.DatabasePasswordSecurerBean" init-method="secureDatabase" depends-on="dataSource">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<bean id="saltSource" class="org.springframework.security.authentication.dao.ReflectionSaltSource">
		<property name="userPropertyToUse" value="salt" />
	</bean>

	<jdbc:embedded-database id="dataSource" type="HSQL">
		<jdbc:script location="classpath:security-schema.sql" />
		<jdbc:script location="classpath:remember-me-schema.sql" />
		<jdbc:script location="classpath:test-data.sql" />
		<jdbc:script location="classpath:acl-security-schema.sql" />
		<jdbc:script location="classpath:test-acl-data.sql" />
	</jdbc:embedded-database>
	
	<bean  id="databaseQueryBean" class="com.example.security.DatabaseQueryBean" depends-on="dataSource">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<bean id="aclDecissionManager" class="com.example.security.acl.CustomAffirmativeBased">
		<!-- decision manager relies on voters to make authorization decisions -->
		<property name="decisionVoters">
			<list>
				<ref bean="categoryReadVoter"/>
				<ref bean="adminResourceReadVoter"/>
			</list>
		</property>
	</bean>
	<bean id="categoryReadVoter" class="com.example.security.acl.CustomAclEntryVoter">
		<!--
   		 public AclEntryVoter(AclService aclService, String processConfigAttribute, Permission[] requirePermission) {
		-->
		<constructor-arg ref="aclService"/>
		<constructor-arg value="VOTE_CATEGORY_READ"/><!-- VOTE_CATEGORY_READ - the name of security attribute this voter can vote on, this matches @Secure annotation on method -->
		<constructor-arg>
			<array>
				<util:constant static-field="org.springframework.security.acls.domain.BasePermission.READ"/>
			</array>
		</constructor-arg>
		<property name="processDomainObjectClass" value="com.example.security.data.Category"/>
	</bean>
		
	<bean id="adminResourceReadVoter" class="com.example.security.acl.CustomAclEntryVoter">
		<!--
   		 public AclEntryVoter(AclService aclService, String processConfigAttribute, Permission[] requirePermission) {
		-->
		<constructor-arg ref="aclService"/>
		<constructor-arg value="VOTE_ADMIN_READ"/>
		<constructor-arg>
			<array>
				<util:constant static-field="com.example.security.acl.CustomPermission.ADMIN_READ"/>
			</array>
		</constructor-arg>
		<property name="processDomainObjectClass" value="com.example.security.data.Category"/>
	</bean>
	
	<bean id="aclService" class="org.springframework.security.acls.jdbc.JdbcAclService">
		<!--  public JdbcAclService(DataSource dataSource, LookupStrategy lookupStrategy) { -->
		<constructor-arg ref="dataSource"/>
		<constructor-arg ref="lookupStrategy"/>
	</bean>
	<bean id="lookupStrategy" class="org.springframework.security.acls.jdbc.BasicLookupStrategy">
		<!-- for the moment we use depricated constructor 
	 		 public BasicLookupStrategy(DataSource dataSource, AclCache aclCache, AclAuthorizationStrategy aclAuthorizationStrategy, AuditLogger auditLogger) {
             TODO: replace it with other one
        -->
        <constructor-arg ref="dataSource"/>
        <constructor-arg ref="aclCache" />
        <constructor-arg ref="aclAuthorizationStrategy"/>
        <constructor-arg ref="auditLogger"/>
        <property name="permissionFactory" ref="customPermissionFactory"/>
	</bean>
	<bean id="customPermissionFactory" class="com.example.security.acl.CustomPermissionFactory"/>
	<bean id="aclCache" class="com.example.security.NullAclCache"/>
	<bean id="aclAuthorizationStrategy" class="org.springframework.security.acls.domain.AclAuthorizationStrategyImpl">
		<constructor-arg>
			<array>
				<ref local="aclAdminAuthority" />
				<ref local="aclAdminAuthority" />
				<ref local="aclAdminAuthority" />
			</array>
		</constructor-arg>
	</bean>
	<bean id="aclAdminAuthority" class="org.springframework.security.core.authority.GrantedAuthorityImpl">
		<constructor-arg value="ROLE_ADMIN"/>
	</bean>
	<bean id="auditLogger" class="org.springframework.security.acls.domain.ConsoleAuditLogger"/>
</beans>
