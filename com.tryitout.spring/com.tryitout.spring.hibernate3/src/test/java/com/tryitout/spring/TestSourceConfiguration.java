package com.tryitout.spring;

import java.util.List;

import org.apache.log4j.Logger;
import org.hibernate.Criteria;
import org.hibernate.Query;
import org.hibernate.SQLQuery;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.cfg.Configuration;
import org.hibernate.criterion.Restrictions;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

import com.example.domain.Book;
import com.tryitout.spring.util.HibernateHelper;

public class TestSourceConfiguration {

	private static Logger logger = Logger.getLogger(TestSourceConfiguration.class);
	private static Session session = null;
	
	@BeforeClass
	public static void initTest(){

		Configuration config = new Configuration();
		config.setProperty("hibernate.connection.url", "jdbc:hsqldb:hsql://localhost/hiberdb");
		config.setProperty("hibernate.connection.driver_class", "org.hsqldb.jdbcDriver");
		config.setProperty("hibernate.connection.username", "sa");
		config.setProperty("hibernate.connection.password", "");
		config.setProperty("hibernate.pool_size", "5");
		config.setProperty("hibernate.show_sql", "false");
		config.setProperty("hibernate.dialect", "org.hibernate.dialect.HSQLDialect");
		config.addResource("com/example/domain/Book.hbm.xml");
		
		session = HibernateHelper.getSession();
	
		Transaction tx = session.beginTransaction();
		SQLQuery createTable = session.createSQLQuery("create table BOOK (ID bigint generated by default as identity (start with 1), TITLE varchar(50), ISBN varchar(50), primary key (ID))");
		int result = createTable.executeUpdate();
		logger.debug("Create table result = " + result);
		tx.commit();
	}
	
	@Test
	public void test() {
		logger.debug("test() - begin");
		
		//starting a transaction
		Transaction tx = session.beginTransaction();
		//persisting...
		Book book = new Book("Andrew", "White");
		session.save(book);
		//commiting the transaction
		tx.commit();
		
		// query content of BOOK table
		Query query = session.createQuery("select title,isbn,id from Book");
		List<Object[]> result = query.list();
		logger.debug("result size = " + result.size());
		for (Object[] item : result) {
			logger.debug("OUT -> "+ item[0] + ", " + item[1] + ", " + item[2]);
		}
		
		// alternatively you can find object like this by id
		Book b1 = (Book) session.load(Book.class, new Integer(1));
		logger.debug("object by id (load) = " + b1);
		
		// or like this
		b1 = (Book) session.get(Book.class, new Integer(1)); // the difference from load method is that load throws exception if the object does not exist, this returns then null
		logger.debug("object by id (get) = " + b1);
		
		// or with Criteria
		Criteria criteria = session.createCriteria(Book.class);
		criteria.add(Restrictions.idEq(new Integer(1)));
		List<Book>  criteriaResult = criteria.list();
		for (Object bk : criteriaResult) {
			logger.debug("criteriaResult -> "+ bk);
		}
		
		logger.debug("test() - end");
	}
	
	@AfterClass
	public static void cleanup(){
		Transaction tx = session.beginTransaction();
		SQLQuery createTable = session.createSQLQuery("drop table BOOK");
		int result = createTable.executeUpdate();
		logger.debug("Drop table result = " + result);
		tx.commit();
		
		session.close();
	}
}
