DROP SEQUENCE IF EXISTS seq_autonumbered;
CREATE SEQUENCE seq_autonumbered
	RESTART WITH 100
	INCREMENT BY 5
	MINVALUE 1
	--NOMAXVALUE
	--NOCYCLE
	--NOCACHE
;

DROP TABLE IF EXISTS autonumbered;
CREATE TABLE autonumbered(
	pk_id integer PRIMARY KEY DEFAULT nextval('seq_autonumbered'),
	text VARCHAR(100)
);

INSERT INTO autonumbered (text) VALUES ('some text 1');
INSERT INTO autonumbered (text) VALUES ('some text 2');
INSERT INTO autonumbered (text) VALUES ('some text 3');
INSERT INTO autonumbered (text) VALUES ('some text 4');

-- Universally Unique Identifiers (UUID) = GUID in PostgreSGL
-- Starting at postgres 8 you can use the UUID datatype to store GUIDs. Unfortunately the GUIDs are not generated by postgres. 
-- Since it is impossible to guarantee a GUIDs uniqueness anyway, 
-- this simple way of generating them is as good as any. 
-- Just hash up the sequence with the current time and cast the 128 bit
-- result to a UUID.
DROP TABLE IF EXISTS uuid_test;
DROP SEQUENCE IF EXISTS uuid_test_seq;
CREATE SEQUENCE uuid_test_seq;
CREATE TABLE uuid_test
(
  pk_id integer PRIMARY KEY DEFAULT nextval('uuid_test_seq'),
  guid uuid DEFAULT (md5(((currval('uuid_test_seq'::regclass) || ''::text) || now())))::uuid,
  x character(1)
)
WITH (OIDS=FALSE);
 
INSERT INTO uuid_test(x) VALUES('x');
 
SELECT * FROM uuid_test;